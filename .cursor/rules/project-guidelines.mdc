---
description: 
globs: 
alwaysApply: true
---
# AI Link Categorization Project Guidelines

## Project Overview
This is an AI-powered link categorization and retrieval application consisting of:
- **Backend**: FastAPI server with MCP (Model Context Protocol) capabilities using FastMCP
- **Frontend**: Web interface for link management and AI-powered categorization
- **Core Features**: HTML scraping, content summarization, embedding generation, intelligent link categorization

## Technology Stack

### Backend ([backend/](mdc:Front/Front/Front/Front/backend))
- **Framework**: FastAPI with comprehensive type hints
- **MCP Integration**: FastMCP for model communication protocols
- **Database**: SQLAlchemy ORM with Alembic migrations ([backend/alembic.ini](mdc:Front/Front/Front/Front/backend/alembic.ini))
- **AI/ML**: Embedding models, summarization, classification
- **Web Scraping**: BeautifulSoup4, requests, or similar
- **Async**: asyncio/await patterns for concurrent operations
- **Validation**: validating models with Pydantic
- **Formatting**: Ruff is used for formatting

### Frontend ([frontend/](mdc:Front/Front/Front/Front/frontend))
- **Framework**: Modern TypeScript-based React
- **Type Safety**: Full TypeScript with strict type checking
- **API Communication**: Typed API client for backend communication, TanstackQuery
- **UI/UX**: Modern, responsive design for link management, Shad/cn

## File Organization

### Backend Structure
```
backend/
├── app/
│   ├── modules/
│   │   ├── scrapper/
│   │   ├── mcp_server/
│   │   ├── core/
│   └── alembic/      # Database migrations
├── tests/
└── requirements.txt
```

## Development Workflow

1. Always implement with full type safety (Python type hints + TypeScript)
2. Implement proper logging for AI operations and errors
3. Use async/await patterns consistently for I/O operations
4. Version control database migrations carefully with Alembic
